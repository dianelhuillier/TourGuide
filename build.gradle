buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"


bootJar {
    baseName = 'tourGuide'
    version =  '1.0.0'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

ext {
    set('springCloudVersion', "2020.0.3")
}




sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {


        compile 'org.springframework.boot:spring-boot-starter-webflux'


    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.projectlombok:lombok:1.18.20'


    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.5.4'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.5.4'
    implementation group: 'org.javamoney', name: 'moneta', version: '1.4.2'
    implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'



    /*compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile group: 'org.javamoney', name: 'moneta', version: '1.3'
	compile group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
	*/
    compile(name:'gpsUtil', ext:'jar')
    compile(name:'RewardCentral', ext:'jar')
    compile(name:'TripPricer', ext:'jar')


    testCompile("junit:junit")
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
  //  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.0.3'



}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}





idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}



jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
  }
}


jar {
    manifest {
        attributes "Main-Class": "tourGuide.Application"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}